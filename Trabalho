#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>

#define TM 9

void criaArquivoEntrada(){
	FILE *f = fopen("entrada.txt", "w+");
	
	int m[TM][TM];
	int i, j, numero;
	
	for(i=0; i < TM; i++){
		for(j = i; j < TM; j++){
			if(i == j) m[i][j] = 0;
			else{
				numero = rand()%20;
				if(numero <= 1){
					numero = -1;
				}else{
					numero = rand()%20;
					numero += 1;
				}
				m[i][j] = numero;
				m[j][i] = numero;
			}
		}
	}
	
	if(f == NULL){
		return;
	}else{
		for(i=0; i < TM; i++){
			for(j=0; j < TM; j++){
				if(i == j){
					fprintf(f, "%d;", 0);
				}else{
					fprintf(f, "%d;", m[i][j]);
				}
			}
			fprintf(f, "\n");
		}
		fclose(f);
	}
}
int gerPopulacaoInicial(int n){
	return rand()%n;
}
int contaTamanhoMatriz(FILE *fp){
	int nElementos = 1;
	int valor = 0;
	rewind(fp);
	if(fp != NULL){
		while(!feof(fp)){
			nElementos += fscanf(fp, "%d;", &valor);
		}
	}
	return (int)sqrt(nElementos);
}

int main(){
	srand(time(NULL));
	criaArquivoEntrada();
	FILE *arq = fopen("entrada.txt", "r");
	int nElementos = 1;
	int valor = 0;
	int X = contaTamanhoMatriz(arq); // X contém o tamanho da matriz
	int i=0, j=0;
	int indice;
	int maxLig, repete, para, ligacoes, ultPosicao, matriz[X][X], erro;
	int vetorTomada[X];

	rewind(arq);
	if(arq != NULL){
		i = 0;
		j = 0;
		while(!feof(arq)){
			nElementos += fscanf(arq, "%d;", &valor);
			matriz[i][j] = valor;
			j++;
			if(i >= X) break;
			if(j >= X){
				j = 0;
				i++;
			}
		}
		fclose(arq);
	}
	
	for(i=0; i < X; i++){ //imprime a matriz (lido do arquivo)
		for(j=0; j < X; j++){
			printf("%d;\t", matriz[i][j]);
		}
		printf("\n");
	}
	
	printf("Digite o numero de ligações possiveis para cara tomada: ");
	scanf("%d",&ligacoes);
	
	if(ligacoes > 11){
		maxLig = 11;
		repete = X * 11;
	}
	else{
		maxLig = ligacoes;
		repete = X * (X-1);
	}
	
	int numElementosIniciais;
	printf("Digite o numero de elementos iniciais: ");
	scanf("%d",&numElementosIniciais);
	
	int caminhos[numElementosIniciais][repete]; //matriz para armazenar os caminhos criados (tamanho = nr de elementos iniciais x tamanho maximo do caminho)
	int custoCaminho[numElementosIniciais];//armazena o custo de cada caminho (tamanho do nr de elementos iniciais)
	
	for(i = 0; i < numElementosIniciais; i++) //inicializa o vetor de custo dos caminhos
		custoCaminho[i] = 0;
	
	for(i=0;i<numElementosIniciais;i++){ //inicializa a matriz com os caminhos
		for(j=0;j<repete;j++){
			caminhos[i][j] = 0;
		}
	}
	
	int caminho[repete];
	int numElementos = 0;
	int numExecucoes = 0;
	int custo = 0;
	
	for(numElementos = 0; numElementos < numElementosIniciais; numElementos++){
		
		ultPosicao = 0;
		para = 0;
		custo = 0;
		numExecucoes = 0;
		
		//inicializa o vetor de tomadas já utilizadas
		for(i = 0; i < X; i++)
			vetorTomada[i] = 0;
		vetorTomada[0] = 1;
		
		//inicializa vetor que conterá o caminho
		for(i = 0; i < repete; i++)
			caminho[i] = -1;
		caminho[0] = 0;
		
		indice = gerPopulacaoInicial(X);
		
		while(para == 0){
			numExecucoes++;
			erro = 0;
			if(matriz[ultPosicao][indice] <= 0)
				erro = 1;

			if(caminho[ultPosicao] == indice)
				erro = 1;
			
			if(vetorTomada[caminho[ultPosicao]] > 1 && vetorTomada[indice] > 0)
				erro = 1;

			if(erro == 0){
				for(i = 0; i < ultPosicao; i++){
					if(caminho[i] == caminho[ultPosicao] && caminho[i+1] == indice){
						i = ultPosicao;
						erro = 1;
					}
					if(caminho[i] == indice && caminho[i+1] == caminho[ultPosicao]){
						i = ultPosicao;
						erro = 1;
					}
				}
			}

			if(erro == 0){
				if(vetorTomada[indice] == maxLig)
					erro = 1;
				else
					vetorTomada[indice]++;
			}
			
			if(erro == 0){
				caminho[ultPosicao] = indice; //adiciona elemento sorteado ao caminho
				ultPosicao++;
			}
			//verifica se todas as tomadas já foram ligadas ao menos uma vez
			j = 0;
			for(i = 0; i < X; i++) {
				if(vetorTomada[i] > 0){
					j++;
				}
			}
			
			if(j == X) //entao todas as tomadas já foram ligadas ao menos uma vez
				para = 1;
			else if(repete+1 == numExecucoes){ //evitar loop infinito
				printf("\nadiciona os elementos que faltam ao caminho\n");
				//adiciona os elementos que faltam ao caminho
				for(i = 0; i < repete; i++){
					if(vetorTomada[i] == 0){ //adiciona ao caminho os elementos que ainda não foram sorteados para completar a ligação.
						caminho[ultPosicao] = i;
						ultPosicao++;
						//add verificação para nao incluir caminhos não existentes
						//if(matriz[ultPosicao][indice] <= 0)
						//	erro = 1;
					}
				}
				para = 1;
			}
			else
				indice = gerPopulacaoInicial(X);//senao, gera um novo elemento
		}
		
		//adiciona o caminho criado na matriz de caminhos
		printf("ultPosicao %d",ultPosicao);
		for(i = 0; i < ultPosicao; i++){
			caminhos[numElementos][i] = caminho[i];
			if(i!=ultPosicao){
				custo += matriz[caminho[i]][caminho[i+1]];
				printf("add %d %d %d\n",caminho[i],caminho[i+1],matriz[caminho[i]][caminho[i+1]]);
			}
		}
		//armazena o custo do caminho
		custoCaminho[numElementos] = custo;
	}
	//imprime os caminhos gerados
	for(i = 0; i < numElementosIniciais; i++){
		printf("\ncaminho %d custo: %d\n",i,custoCaminho[i]);
		for(j = 0; j < repete; j++){
			if(caminhos[i][j] > 0)
				printf("%d  ",caminhos[i][j]);
		}
	}
	
	printf("\n");
	
	return 0;
}

